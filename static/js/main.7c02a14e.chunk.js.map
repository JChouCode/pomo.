{"version":3,"sources":["components/pomo.js","App.js","serviceWorker.js","index.js"],"names":["Pomo","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","timeMs","start","tick","intervalId","bind","assertThisInitialized","stop","inherits","createClass","key","value","ms","Math","pow","totalSeconds","floor","minutes","seconds","console","log","concat","window","Notification","permission","requestPermission","alert","_this2","checkNotify","setState","Date","now","clearInterval","setInterval","msToString","react_default","a","createElement","className","onClick","React","Component","App","pomo_Pomo","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c02a14e.chunk.js","sourcesContent":["import React from 'react';\nimport \"./css/pomo.css\"\n\nexport class Pomo extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: \"25:00\",\n      timeMs: 0,\n      start: 0,\n      tick: false,\n      intervalId: 0\n    }\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n  }\n\n  msToString(ms) {\n    let time = 1.5 * 10 ** 6 - this.state.timeMs;\n    let totalSeconds = Math.floor(time / 1000);\n    let minutes = Math.floor(totalSeconds / 60);\n    let seconds = totalSeconds % 60;\n    if (seconds < 10) {\n      console.log(time + \" : \" + `${minutes}:0${seconds}`);\n      return `${minutes}:0${seconds}`\n    }\n    console.log(time + \" : \" + `${minutes}:${seconds}`);\n    return `${minutes}:${seconds}`;\n\n  }\n\n  checkNotify() {\n    if (!(\"Notification\" in window)) {\n      alert(\"Browser does not support notifications: Will not notify on completion\");\n    }\n    else if (Notification.permission === \"granted\") {\n      let notification = new Notification(\"Notifications granted!\");\n    }\n    // Otherwise, we need to ask the user for permission\n    else if (Notification.permission !== 'denied') {\n      Notification.requestPermission(function (permission) {\n        // If the user accepts, let's create a notification\n        if (permission === \"granted\") {\n          let notification = new Notification(\"Notifications granted!\");\n        }\n      });\n    }\n  }\n\n  start() {\n    this.checkNotify();\n    this.setState({ time: \"25:00\", timeMs: 0, start: Date.now(), tick: true });\n    clearInterval(this.state.intervalId);\n    let intervalId = setInterval(() => {\n      let time = 1.5 * 10 ** 6 - this.state.timeMs;\n      if (time < 0) {\n        if (Notification.permission === \"granted\") {\n          let notification = new Notification(\"Pomo Finished: Good work!\");\n          this.stop();\n        }\n      }\n      this.setState({ time: this.msToString(this.state.timeMs), timeMs: Date.now() - this.state.start })\n    }, 100);\n    this.setState({ intervalId: intervalId });\n  }\n\n  stop() {\n    clearInterval(this.state.intervalId);\n    var notification = new Notification(\"Pomo Stopped\");\n    this.setState({ time: \"25:00\", timeMs: 0, start: 0, tick: false });\n  }\n\n  render() {\n    return (\n      <div className=\"pomo\">\n        <div className=\"time\">\n          {this.state.time}\n        </div>\n        <div className=\"buttons\">\n          <button onClick={this.start}>start</button>\n          <button onClick={this.stop}>stop</button>\n        </div>\n      </div>\n    )\n  }\n\n}","import React from 'react';\nimport './App.css';\n\nimport { Pomo } from \"./components/pomo\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"gray-rect\"></div>\n      <div className=\"logo\">pomo<span>.</span></div>\n      <div className=\"desc\">The <span>simplest</span> pomodoro timer on the modern web.</div>\n      <Pomo />\n      <div className=\"copyright\">Copyright Â© Jeffrey Chou</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}